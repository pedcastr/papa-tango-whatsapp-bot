const venom = require('venom-bot');
const fs = require('fs');
const path = require('path');
const logger = require('../utils/logger');
const paymentService = require('./payment');
const { db } = require('../config/firebase');
const emailSender = require('../utils/emailSender');

// Configura√ß√µes de email
const ADMIN_EMAIL = process.env.ADMIN_EMAIL || 'pedrohenriquecastro.martins@gmail.com';
const SERVER_URL = process.env.RENDER_EXTERNAL_URL || 'http://localhost:3000';

// Pasta para tokens
const tokensDir = path.join(__dirname, '../../tokens');
if (!fs.existsSync(tokensDir)) {
  fs.mkdirSync(tokensDir);
}

let client = null;
// Vari√°vel para armazenar o QR code
let currentQrCode = null;
// Vari√°vel para armazenar o timestamp do √∫ltimo QR code
let lastQrCodeTimestamp = null;
// Vari√°vel para controlar se j√° enviamos email para o QR code atual
let qrCodeEmailSent = false;

// Fun√ß√£o para configurar conex√£o robusta
function setupRobustConnection(client) {
  // Monitorar estado da sess√£o com tratamento mais robusto
  client.onStateChange((state) => {
    logger.info('Estado da sess√£o alterado:', state);

    // Reconectar se desconectado
    if (state === 'CONFLICT') {
      logger.warn('Conflito detectado. Usando sess√£o aqui...');
      client.useHere();
    } else if (state === 'UNPAIRED' || state === 'UNLAUNCHED') {
      logger.warn('Sess√£o desemparelhada ou n√£o iniciada. Tentando reconectar...');
      setTimeout(() => {
        client.useHere();
      }, 3000);
    }
  });

  // Verificar estado da conex√£o periodicamente
  setInterval(async () => {
    try {
      if (!client) return;

      const state = await client.getConnectionState();
      logger.info(`Verifica√ß√£o peri√≥dica do estado da conex√£o: ${state}`);

      if (state === 'DISCONNECTED') {
        logger.warn('Conex√£o desconectada. Tentando reconectar...');
        try {
          await client.restart();
          logger.info('Cliente reiniciado ap√≥s desconex√£o');
        } catch (error) {
          logger.error('Erro ao reiniciar cliente:', error);
        }
      }
    } catch (error) {
      logger.error('Erro ao verificar estado da conex√£o:', error);
    }
  }, 3 * 60 * 1000); // A cada 3 minutos
}

// Fun√ß√£o para enviar notifica√ß√£o por email sobre novo QR code
async function notifyQrCodeByEmail() {
  try {
    if (qrCodeEmailSent) {
      logger.info('Email j√° enviado para este QR code, ignorando');
      return;
    }
    
    const qrCodeUrl = `${SERVER_URL}/qrcode`;
    logger.info(`Enviando notifica√ß√£o de QR code por email para ${ADMIN_EMAIL} com URL ${qrCodeUrl}`);
    
    const success = await emailSender.sendQrCodeNotification(ADMIN_EMAIL, qrCodeUrl);
    
    if (success) {
      logger.info('Notifica√ß√£o de QR code enviada com sucesso');
      qrCodeEmailSent = true;
    } else {
      logger.error('Falha ao enviar notifica√ß√£o de QR code');
    }
  } catch (error) {
    logger.error('Erro ao enviar notifica√ß√£o de QR code:', error);
    logger.error('Detalhes do erro:', error.message);
    if (error.response) {
      logger.error('Resposta do servidor de email:', error.response.data);
    }
  }
}

// Inicializar cliente WhatsApp
async function initWhatsApp() {
  try {
    client = await venom.create({
      session: 'papa-motos',
      multidevice: true,
      headless: 'new',
      useChrome: true,
      browserArgs: ['--no-sandbox'],
      disableWelcome: true,
      // Op√ß√µes para capturar o QR code
      qrOptions: {
        size: 300
      },
      // Callback para quando o QR code for gerado
      onQR: (qrCode) => {
        currentQrCode = qrCode;
        lastQrCodeTimestamp = new Date().toISOString();
        qrCodeEmailSent = false; // Resetar flag para permitir envio de email
        logger.info('Novo QR code gerado');

        // Enviar notifica√ß√£o por email
        notifyQrCodeByEmail();
      }
    });

    logger.info('Cliente WhatsApp conectado!');

    // Configurar manipulador de mensagens recebidas
    client.onMessage(handleIncomingMessage);

    // Configurar conex√£o robusta
    setupRobustConnection(client);

    return client;
  } catch (error) {
    logger.error('Erro ao inicializar cliente WhatsApp:', error);
    throw error;
  }
}

// Fun√ß√£o para lidar com mensagens recebidas
async function handleIncomingMessage(message) {
  if (message.isGroupMsg) return;

  // Verificar o tipo de mensagem ANTES de verificar o corpo
  if (message.type === 'ptt' || message.type === 'audio') {
    // Mensagem de √°udio
    await client.sendText(message.from,
      'ü§ñ Desculpe, este √© um *atendimento automatizado* e n√£o consigo processar *mensagens de √°udio*.\n\n' +
      'ü§ñ *Por favor, envie sua solicita√ß√£o em formato de texto.*');
    return;
  }

  // Verificar se √© uma imagem ou documento
  if (message.type === 'image' || message.type === 'document') {
    await client.sendText(message.from,
      `*Obrigado por enviar seu comprovante* üôèüèΩ\n\n` +
      `Seu pagamento ser√° processado *automaticamente pelo sistema* assim que for *confirmado* pela institui√ß√£o financeira.\n\n` +
      `Se precisar de ajuda, entre em contato com nosso suporte: (85) 99268-4035.\n\n` +
      `Verifique seu e-mail, pois quando o pagamento for aprovado enviaremos uma mensagem por l√°.\n\n*Obs: Caso j√° tenha recebido o e-mail de pagamento recebido, desconsidere este aviso.*`);
    return; // Adicionado return para interromper o processamento aqui
  }

  // Se chegou aqui, √© uma mensagem de texto
  // Verificar se tem corpo da mensagem
  if (!message.body) return;

  // Extrair o n√∫mero de telefone e remover o sufixo @c.us
  const telefoneCompleto = message.from.replace('@c.us', '');

  // Formatos poss√≠veis para buscar no banco de dados
  const formatosPossiveis = [
    telefoneCompleto,                                // Formato completo com c√≥digo do pa√≠s
    telefoneCompleto.replace(/^55/, ''),            // Sem o c√≥digo do pa√≠s (55)
    telefoneCompleto.replace(/^55(\d{2})/, '$1'),   // Apenas DDD + n√∫mero
    `+${telefoneCompleto}`,                         // Com + na frente
    `+55${telefoneCompleto.replace(/^55/, '')}`     // Formato internacional padr√£o
  ];

  try {
    // Registrar o n√∫mero recebido para depura√ß√£o
    logger.info(`Mensagem recebida de: ${message.from}, n√∫mero extra√≠do: ${telefoneCompleto}`);

    // Tentar encontrar o usu√°rio com qualquer um dos formatos poss√≠veis
    let userQuery;
    let userData;
    let userId;

    for (const formato of formatosPossiveis) {
      logger.info(`Tentando buscar usu√°rio com telefone: ${formato}`);

      userQuery = await db.collection('users')
        .where('telefone', '==', formato)
        .limit(1)
        .get();

      if (!userQuery.empty) {
        userData = userQuery.docs[0].data();
        userId = userQuery.docs[0].id;
        logger.info(`Usu√°rio encontrado com telefone ${formato}: ${userId}`);
        break;
      }
    }

    // Se n√£o encontrou o usu√°rio, tentar uma busca mais ampla
    if (!userData) {
      logger.info('Tentando busca alternativa por n√∫mero parcial');

      // Obter os √∫ltimos 8 d√≠gitos do n√∫mero (parte comum em qualquer formato)
      const ultimosDigitos = telefoneCompleto.slice(-8);

      // Buscar todos os usu√°rios
      const todosUsuarios = await db.collection('users').get();

      // Verificar cada usu√°rio se o telefone termina com os mesmos d√≠gitos
      for (const doc of todosUsuarios.docs) {
        const dadosUsuario = doc.data();
        if (dadosUsuario.telefone && dadosUsuario.telefone.endsWith(ultimosDigitos)) {
          userData = dadosUsuario;
          userId = doc.id;
          logger.info(`Usu√°rio encontrado com correspond√™ncia parcial: ${userId}`);
          break;
        }
      }
    }

    // Se ainda n√£o encontrou o usu√°rio
    if (!userData) {
      logger.warn(`Usu√°rio n√£o encontrado para o n√∫mero: ${telefoneCompleto}`);
      await client.sendText(message.from,
        'Ol√°! Parece que voc√™ ainda n√£o est√° cadastrado no nosso sistema.\n\n ' +
        'Baixe nosso aplicativo Papa Tango na Play Store ou fale conosco no WhatsApp (85) 99268-4035 para se cadastrar e alugar uma moto!');
      return;
    }

    const mensagem = message.body.toLowerCase();

    // Verificar se √© um agradecimento
    const palavrasAgradecimento = ['obrigado', 'obrigada', 'obg', 'obg!', 'valeu', 'grato', 'grata', 'thanks', 'agrade√ßo', 'vlw', 'flw'];
    const ehAgradecimento = palavrasAgradecimento.some(palavra => mensagem.includes(palavra));

    if (ehAgradecimento) {
      await client.sendText(message.from,
        'De nada! Estamos sempre √† disposi√ß√£o para ajudar. Se precisar de mais alguma coisa, √© s√≥ me chamar :)');
      return;
    }

    // Verificar o conte√∫do da mensagem e responder adequadamente
    if (mensagem.includes('pagamento') || mensagem.includes('pagar') || mensagem.includes('1') || mensagem.includes('informa√ß√µes sobre o pagamento')) {
      await paymentService.enviarInformacoesPagamento(client, message.from, userId, userData);
    }
    else if (mensagem.includes('boleto') || mensagem.includes('2') || mensagem.includes('pagar com boleto')) {
      await paymentService.enviarBoleto(client, message.from, userId, userData);
    }
    else if (mensagem.includes('pix') || mensagem.includes('3') || mensagem.includes('pagar com pix')) {
      await paymentService.enviarPix(client, message.from, userId, userData);
    }
    else if (mensagem.includes('atraso') || mensagem.includes('atrasado') || mensagem.includes('4') || mensagem.includes('regularizar atraso')) {
      await paymentService.verificarAtraso(client, message.from, userId, userData);
    }
    else if (mensagem.includes('atendimento') || mensagem.includes('atendente') || mensagem.includes('falar com atendente') || mensagem.includes('5')) {
      await client.sendText(message.from, 'Por favor, entre em contato com nossa equipe de atendimento para obter assist√™ncia. O n√∫mero para contato √© (85) 99268-4035.\n\nEste contato √© *automatizado* e n√£o posso responder a perguntas que *n√£o sejam as mencionadas acima*.');
    }
    else {
      // Mensagem padr√£o com menu de op√ß√µes
      await client.sendText(message.from,
        `Ol√°, *${userData.nome || 'cliente'}!* Como posso ajudar?\n\n` +
        '1Ô∏è‚É£ - Informa√ß√µes sobre pagamento\n' +
        '2Ô∏è‚É£ - Gerar boleto\n' +
        '3Ô∏è‚É£ - Gerar c√≥digo PIX\n' +
        '4Ô∏è‚É£ - Verificar atraso\n' +
        '5Ô∏è‚É£ - Falar com atendente\n\n' +
        'Responda com o n√∫mero da op√ß√£o desejada ou digite sua d√∫vida.'
      );
    }
  } catch (error) {
    logger.error('Erro ao processar mensagem:', error);
    await client.sendText(message.from,
      'Desculpe, ocorreu um erro ao processar sua solicita√ß√£o. Por favor, tente novamente mais tarde.');
  }
}

// Fun√ß√£o para enviar c√≥digo de verifica√ß√£o
async function enviarCodigo(numero, codigo) {
  try {
    if (!client) {
      throw new Error('Cliente WhatsApp n√£o inicializado');
    }

    // Formatar n√∫mero para WhatsApp
    const numeroLimpo = numero.replace(/\D/g, '');
    const numeroWhatsApp = `${numeroLimpo}@c.us`;

    const mensagem = `Seu c√≥digo de verifica√ß√£o √©: ${codigo}`;

    const resultado = await client.sendText(numeroWhatsApp, mensagem);

    logger.info(`C√≥digo enviado para ${numeroLimpo}: ${codigo}`);

    return {
      success: true,
      messageId: resultado.id
    };
  } catch (error) {
    logger.error(`Erro ao enviar c√≥digo para ${numero}:`, error);
    throw error;
  }
}

// Fun√ß√£o para obter o QR code atual
function getQrCode() {
  return currentQrCode;
}

// Fun√ß√£o para obter o timestamp do √∫ltimo QR code
function getLastQrCodeTimestamp() {
  return lastQrCodeTimestamp;
}

module.exports = {
  initWhatsApp,
  enviarCodigo,
  getClient: () => client,
  getQrCode,
  getLastQrCodeTimestamp
};
